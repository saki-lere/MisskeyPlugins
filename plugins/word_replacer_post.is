/// @ 0.15.0
### {
  name: "Word Replacer(Post)"
  version: "0.1.2"
  author: "@salano_ym@misskey.io"
  description: "ノート投稿時に特定の単語を置換します"
  config: {
    repls: {
      type: 'string'
      label: '置換リスト'
      description: '例: ["old", "new"], ["旧", "新"] ...'
      default: ''
    }
  }
}

@validate(repls) {
  if Core:type(repls) != 'arr' {
    return [[] false]
  }
  let new_repls = []
  var ok = true
  each let r repls {
    if Core:type(r) != 'arr' || r.len != 2 || Core:type(r[0]) != 'str' || Core:type(r[1]) != 'str' {
      ok = false
    } else {
      new_repls.push(r)
    }
  }
  return [new_repls ok]
}


@replace(text repls) {
  if Core:type(text) != 'str' {
    return text
  }
  each let r repls {
    text = text.replace(r[0] r[1])
  }
  return text
}

let json_text = `[{Plugin:config.repls}]`
let a = if Json:parsable(json_text) {
  validate(Json:parse(json_text))
} else {
  [[] false]
}
let repls = a[0]
let is_valid_json = a[1]

@remove_null_property(object) {
  let new_obj = {}
  each let kv Obj:kvs(object) {
    let v = if Core:type(kv[1]) == 'obj' {
      remove_null_property(kv[1])
    }
    else { kv[1] }
    if Core:type(v) != 'null' {
      Obj:set(new_obj kv[0] v)
    }
  }
  return new_obj
}

@f(note) {
  note.text = replace(note.text repls)
  note.cw = replace(note.cw repls)
  remove_null_property(note)
}

if is_valid_json {
  Plugin:register_note_post_interruptor(f)
} else {
  Mk:dialog('Word Replacer(Post)' '置換リストが不正です' 'error')
}
